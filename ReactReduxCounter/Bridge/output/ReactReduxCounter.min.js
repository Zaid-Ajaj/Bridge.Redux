Bridge.assembly("ReactReduxCounter",function(){"use strict";Bridge.define("ReactReduxCounter.App",{statics:{log:function(T,something){console.log(something)}},$main:function(){var counterReducer=Bridge.Redux.BuildReducer.for(Object).whenStateIsUndefinedOrNull($_.ReactReduxCounter.App.f1).whenActionHasType$1(ReactReduxCounter.IncrementValue,$_.ReactReduxCounter.App.f2).whenActionHasType$1(ReactReduxCounter.DecrementValue,$_.ReactReduxCounter.App.f3).whenActionIsUnknown($_.ReactReduxCounter.App.f4).build(),store=Redux.createStore(counterReducer,{value:0}),counterView;store.subscribe(function(){Bridge.Console.log(System.String.format("Current value => {0}",store.getState().value))});Bridge.Redux.Extensions.dispatch(Object,ReactReduxCounter.IncrementValue,store,new ReactReduxCounter.IncrementValue);Bridge.Redux.Extensions.dispatch(Object,ReactReduxCounter.IncrementValue,store,new ReactReduxCounter.IncrementValue);Bridge.Redux.Extensions.dispatch(Object,ReactReduxCounter.IncrementValue,store,new ReactReduxCounter.IncrementValue);counterView=Bridge.ReactRedux.ReactRedux.component(Object,System.Int32,Bridge.merge(new(Bridge.ReactRedux.ContainerProps$2(Object,System.Int32)),{setStore:store,setStateToPropsMapper:$_.ReactReduxCounter.App.f5,setRenderer:function(counterValue){return React.DOM.div({},React.DOM.button(ReactReduxCounter.Attr.onClick(function(){Bridge.Redux.Extensions.dispatch(Object,ReactReduxCounter.IncrementValue,store,new ReactReduxCounter.IncrementValue)}),"+"),React.DOM.h4(null,System.String.format("Counter value is {0}",counterValue)),React.DOM.button(ReactReduxCounter.Attr.onClick(function(){Bridge.Redux.Extensions.dispatch(Object,ReactReduxCounter.DecrementValue,store,new ReactReduxCounter.DecrementValue)}),"-"))}}));ReactDOM.render(Bridge.React.Component$2(Bridge.ReactRedux.ContainerProps$2(Object,System.Int32),System.Int32).op_Implicit$1(counterView),document.getElementById("app"))}});var $_={};Bridge.ns("ReactReduxCounter.App",$_);Bridge.apply($_.ReactReduxCounter.App,{f1:function(){return ReactReduxCounter.App.log(String,"State was either null or undefined, returning a default counter..."),{value:0}},f2:function(state){return{value:state.value+1|0}},f3:function(state){return{value:state.value-1|0}},f4:function(state){return ReactReduxCounter.App.log(String,"Action dispatched was unknown, returning the same state object back with no modifications"),state},f5:function(counter){return counter.value}});Bridge.define("ReactReduxCounter.Attr",{statics:{onClick:function(ev){return{onClick:ev}}}});Bridge.define("ReactReduxCounter.DecrementValue");Bridge.define("ReactReduxCounter.IncrementValue");Bridge.define("ReactReduxCounter.UnknownAction")});